#version 450 core

layout(local_size_x = 1, local_size_y = 1, local_size_z = 1) in;

layout(std430, binding = 0) buffer CollisionOutput {
    float groundDist;
    vec3 normal;
};

uniform vec3 pos;
uniform float u_frequency;
uniform float u_frequencyMultiplier;
uniform float u_amplitude;
uniform float u_amplitudeMultiplier;
uniform float u_floorLevel;
uniform float u_blendFactor;

float isolevel = 0.0;

vec3 random3(vec3 c) {
	float j = 4096.0*sin(dot(c,vec3(17.0, 59.4, 15.0)));
	vec3 r;
	r.z = fract(512.0*j);
	j *= .125;
	r.x = fract(512.0*j);
	j *= .125;
	r.y = fract(512.0*j);
	return r-0.5;
}

// skew constants for 3d simplex functions
const float F3 =  0.3333333;
const float G3 =  0.1666667;

float simplex3d(vec3 p) {
	 vec3 s = floor(p + dot(p, vec3(F3)));
	 vec3 x = p - s + dot(s, vec3(G3));
	 vec3 e = step(vec3(0.0), x - x.yzx);
	 vec3 i1 = e*(1.0 - e.zxy);
	 vec3 i2 = 1.0 - e.zxy*(1.0 - e);
	 vec3 x1 = x - i1 + G3;
	 vec3 x2 = x - i2 + 2.0*G3;
	 vec3 x3 = x - 1.0 + 3.0*G3;
	 vec4 w, d;
	 w.x = dot(x, x);
	 w.y = dot(x1, x1);
	 w.z = dot(x2, x2);
	 w.w = dot(x3, x3);
	 w = max(0.6 - w, 0.0);
	 d.x = dot(random3(s), x);
	 d.y = dot(random3(s + i1), x1);
	 d.z = dot(random3(s + i2), x2);
	 d.w = dot(random3(s + 1.0), x3);
	 w *= w;
	 w *= w;
	 d *= w;

	 return dot(d, vec4(52.0));
}

vec2 path(in float z){
    float s = sin(z/24.)*cos(z/12.);
    return vec2(s*12., 0.);
}

// Tunnel distance function
float map(vec3 p){
    float floorHeight = -5.0;
    float tunnelWidth = 20.0;
    vec2 tun = abs(p.xy - path(p.z))*vec2(0.5, 0.001);
    float n = 1. - max(tun.x, tun.y) + tunnelWidth;

    return min(n, p.y + floorHeight); 
}

float smoothBlend(float terrain, float tunnel, float blendWidth) {
    float t = clamp((terrain - tunnel + blendWidth) / (2.0 * blendWidth), 0.0, 1.0);
    return mix(terrain, tunnel, t);
}

float cubeVal(vec3 pos) {

    float tunnelDensity = -map(pos);

    // Bedrock
    float noise = 0.0; // Accumulator
    float frequency = 0.01;
    float amplitude = 5.0;

    for(int i = 0; i < 6; ++i){
        noise += simplex3d(pos * frequency) * amplitude;
        frequency *= u_frequencyMultiplier;
        amplitude *= u_amplitudeMultiplier;
    }

    float bedrockDensity = -pos.y + noise + 5.0;

    // Hills and Features
    vec3 warp = vec3(simplex3d(pos * 0.005), simplex3d(pos * 0.005), simplex3d(pos * 0.005));
    pos += warp * 40;

    noise = 0.0;
    frequency = u_frequency;
    amplitude = u_amplitude;

    for(int i = 0; i < 6; ++i){
        noise += simplex3d(pos * frequency) * amplitude;
        frequency *= u_frequencyMultiplier;
        amplitude *= u_amplitudeMultiplier;
    }

    float terrainDensity = -pos.y + noise + u_floorLevel;

    float blendedDensity = smoothBlend(terrainDensity, tunnelDensity, u_blendFactor);
    blendedDensity = max(blendedDensity, bedrockDensity);
    return blendedDensity;
}

vec3 computeNormal(vec3 pos) {
    float e = 0.001;
    float dx = cubeVal(vec3(pos.x + e, pos.y, pos.z)) - cubeVal(vec3(pos.x - e, pos.y, pos.z));
    float dy = cubeVal(vec3(pos.x, pos.y + e, pos.z)) - cubeVal(vec3(pos.x, pos.y - e, pos.z));
    float dz = cubeVal(vec3(pos.x, pos.y, pos.z + e)) - cubeVal(vec3(pos.x, pos.y, pos.z - e));
    return normalize(vec3(dx, dy, dz));
}

void main() {
    vec3 rayOrigin = pos;
    vec3 rayDirection = vec3(0.0, -1.0, 0.0); // Ray pointing straight down
    float stepSize = 0.1; // Adjust based on your terrain scale and desired precision
    float maxDistance = 100.0; // Maximum distance to search for the ground
    float distanceTravelled = 0.0;
    bool hit = false;

    for (int i = 0; i < 1000; ++i) {
        vec3 currentPosition = rayOrigin + distanceTravelled * rayDirection;
        float terrainHeight = cubeVal(currentPosition);
        if (terrainHeight >= isolevel) {
            hit = true;
            break;
        }
        distanceTravelled += stepSize;
        if (distanceTravelled > maxDistance) break;
    }


    if (hit) {
        groundDist = distanceTravelled;
        normal = computeNormal(rayOrigin + distanceTravelled * rayDirection);
    } else {
        groundDist = -1.0;
        normal = vec3(0.0, 1.0, 0.0);
    }
}